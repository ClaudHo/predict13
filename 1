import pandas as pd
import numpy as np

import torch
from torch import nn, optim
from torch.optim import lr_scheduler

import torchvision
from torchvision import datasets, transforms, models

from collections import OrderedDict
from PIL import Image
from os import listdir
import json
import argparse

# Initiate variables with default values
checkpoint = 'checkpoint.pth'
filepath = 'cat_to_name.json'    
arch='vgg11'
image_path = 'flowers/test/100/image_07896.jpg'
topk = 5

# Set up parameters for entry in command line
parser = argparse.ArgumentParser()
parser.add_argument('-c','--checkpoint', action='store',type=str, help='Name of trained model to be loaded and used for predictions.')
parser.add_argument('-i','--image_path',action='store',type=str, help='Location of image to predict e.g. flowers/test/class/image')
parser.add_argument('-k', '--topk', action='store',type=int, help='Select number of classes you want to see in descending order.')
parser.add_argument('-j', '--json', action='store',type=str, help='Define name of json file holding class names.')
parser.add_argument('-g','--gpu', action='store_true', help='Use GPU if available')

args = parser.parse_args()

# Select parameters entered in command line
if args.checkpoint:
    checkpoint = args.checkpoint
if args.image_path:
    image_path = args.image_path
if args.topk:
    topk = args.topk
if args.json:
    filepath = args.json
if args.gpu:
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    
with open(filepath, 'r') as f:
    cat_to_name = json.load(f)


file=torch.load("checkpoint.pth")
def load_model(file):
    '''
    load model from a checkpoint
    '''
    #checkpoint = torch.load(checkpoint_path)
    checkpoint = torch.load(file)
    
    model=None
    if checkpoint['arch'] == 'vgg11':

    #if arch == 'vgg11':   
        model = models.vgg11(pretrained=True)
        in_features = 25088
        for param in model.parameters():
            param.requires_grad = False
    elif checkpoint['classifier'] == 'alexnet':
        model = models.alexnet(pretrained=True)
        in_features = 9216
        for param in model.parameters():
            param.requires_grad = False
    elif checkpoint['classifier'] == 'densenet121':
        model = models.densenet121(pretrained=True)
        in_features = 1024
        for param in model.parameters():
            param.requires_grad = False
    else:
        print('Sorry base architecture not recognised')
        print('Loading VGG11 as default')
        model = models.vgg11(pretrained=True)    
    
        model = models.vgg11(pretrained=True)
        
        for param in model.parameters():
                param.requires_grad = False
        model.classifier = checkpoint ['classifier']
        model.load_state_dict(checkpoint['state_dict'])
        model.class_to_idx = checkpoint['mapping']
    return model


def process_image(image_path):
    ''' Scales, crops, and normalizes a PIL image for a PyTorch model,
        returns an Numpy array
    '''
    
    # Process a PIL image for use in a PyTorch model
    size = 256, 256
    crop_size = 224
    
    im = Image.open(image_path)
    
    im.thumbnail(size)

    left = (size[0] - crop_size)/2
    top = (size[1] - crop_size)/2
    right = (left + crop_size)
    bottom = (top + crop_size)

    im = im.crop((left, top, right, bottom))
    
    np_image = np.array(im)
    np_image = np_image/255
    
    means = [0.485, 0.456, 0.406]
    stds = [0.229, 0.224, 0.225]
    
    np_image = (np_image - means) / stds
    pytorch_np_image = np_image.transpose(2,0,1)
    
    return pytorch_np_image

def predict(image_path, model, topk=5):
    ''' Predict the class (or classes) of an image using a trained deep learning model.
    '''
    device_used = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    #img = torch.from_numpy(image)
    #model = load_checkpoint("checkpoint.pth")
    model.to(device_used)
    classes = []
    top_probability = []
    with torch.no_grad():
        
        image_tensor = process_image(image_path)
        image_tensor = image_tensor.float()
        image_tensor = image_tensor.unsqueeze_(0)
        input = Variable(image_tensor)
        input = input.to(device_used)
        output = model.forward(input)
        output = torch.exp(output)
        
        probs, class_tp_idx = output.topk(topk, dim=1)
        
        print(model.class_to_idx)
        model.class_to_idx = dict(map(reversed, model.class_to_idx.items()))
        print(model.class_to_idx)
                
        for j in class_tp_idx[0].tolist():
            classes.append(model.class_to_idx[j])
            top_probability = probs.cpu().numpy()[0].tolist()
        
        
    return top_probability, classes


    
   
    
    
   
    

model = load_model(checkpoint) 

print('-' * 40)

print(model)
#device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
#model.to(device)
print('The model being used for the prediction is above.')
input("When you are ready - press Enter to continue to the prediction.")
labels = predict(image_path,model,topk)
print('-' * 40)
print(labels)
print('-' * 40)
